{"ast":null,"code":"var util = require('./module/Util');\n\nvar wordDictionary = [];\nwordDictionary['en'] = require('../dictionary/default.json'); // try to import optional dictionaries\n\ntry {\n  wordDictionary['fr'] = require('french-badwords-list').array;\n} catch (e) {}\n\ntry {\n  wordDictionary['ru'] = require('russian-bad-words').flatWords;\n} catch (e) {}\n\nvar words = util.clone(wordDictionary['en']);\n/**\n * LeoProfanity\n */\n\nvar LeoProfanity = {\n  /**\n   * Remove word from the list\n   * (private)\n   *\n   * @param {string} str\n   */\n  removeWord: function (str) {\n    var index = words.indexOf(str);\n\n    if (index !== -1) {\n      words.splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\n   * Add word into the list\n   * (private)\n   *\n   * @param {string} str\n   */\n  addWord: function (str) {\n    if (words.indexOf(str) === -1) {\n      words.push(str);\n    }\n\n    return this;\n  },\n\n  /**\n   * Return replacement word from key\n   * (private)\n   *\n   * @example\n   * getReplacementWord('*', 3)\n   * return '***'\n   *\n   * @example\n   * getReplacementWord('-', 4)\n   * return '----'\n   *\n   * @param {string} key\n   * @param {number} n\n   * @returns string\n   */\n  getReplacementWord: function (key, n) {\n    var i = 0;\n    var replacementWord = '';\n\n    for (i = 0; i < n; i++) {\n      replacementWord += key;\n    }\n\n    return replacementWord;\n  },\n\n  /**\n   * Sanitize string for this project\n   * 1. Convert to lower case\n   * 2. Replace comma and dot with space\n   * (private)\n   *\n   * @param {string} str\n   * @returns {string}\n   */\n  sanitize: function (str) {\n    str = str.toLowerCase();\n    /* eslint-disable */\n\n    str = str.replace(/\\.|,/g, ' ');\n    return str;\n  },\n\n  /**\n   * Return current profanity words\n   *\n   * @returns {Array.string}\n   */\n  list: function () {\n    return words;\n  },\n\n  /**\n   * Check the string contain profanity words or not\n   * Approach, to make it fast ASAP\n   *\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   * @see http://stackoverflow.com/questions/6116474/how-to-find-if-an-array-contains-a-specific-string-in-javascript-jquery\n   * @see http://stackoverflow.com/questions/9141951/splitting-string-by-whitespace-without-empty-elements\n   *\n   * @param {string} str\n   * @returns {boolean}\n   */\n  check: function (str) {\n    if (!str) return false;\n    var i = 0;\n    var isFound = false;\n    str = this.sanitize(str); // convert into array and remove white space\n    // add default returned value for some cases (e.g. \".\" will returns null)\n\n    strs = str.match(/[^ ]+/g) || [];\n\n    while (!isFound && i <= words.length - 1) {\n      if (strs.includes(words[i])) isFound = true;\n      i++;\n    }\n\n    return isFound;\n  },\n\n  /**\n   * Internal proceeding method\n   *\n   * @todo improve algorithm\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   *\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  proceed: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n    var self = this;\n    var originalString = str;\n    var result = str;\n    var sanitizedStr = this.sanitize(originalString); // split by whitespace (keep delimiter)\n    // (cause comma and dot already replaced by whitespace)\n\n    var sanitizedArr = sanitizedStr.split(/(\\s)/); // split by whitespace, comma and dot (keep delimiter)\n\n    var resultArr = result.split(/(\\s|,|\\.)/); // loop through given string\n\n    var badWords = [];\n    sanitizedArr.forEach(function (item, index) {\n      if (words.includes(item)) {\n        var replacementWord = item.slice(0, nbLetters) + self.getReplacementWord(replaceKey, item.length - nbLetters);\n        badWords.push(resultArr[index]);\n        resultArr[index] = replacementWord;\n      }\n    }); // combine it\n\n    result = resultArr.join('');\n    return [result, badWords];\n  },\n\n  /**\n   * Replace profanity words\n   *\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  clean: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n    return this.proceed(str, replaceKey, nbLetters)[0];\n  },\n\n  /**\n   * Get list of used bad/profanity words\n   *\n   * @param {string} str\n   * @returns {Array.string}\n   */\n  badWordsUsed: function (str) {\n    if (!str) return '';\n    return this.proceed(str, '*')[1];\n  },\n\n  /**\n   * Add word to the list\n   *\n   * @param {string|Array.string} data\n   */\n  add: function (data) {\n    var self = this;\n\n    if (typeof data === 'string') {\n      self.addWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.addWord(word);\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Remove word from the list\n   *\n   * @param {string|Array.string} data\n   */\n  remove: function (data) {\n    var self = this;\n\n    if (typeof data === 'string') {\n      self.removeWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.removeWord(word);\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Reset word list by using en dictionary\n   * (also remove word that manually add)\n   */\n  reset: function () {\n    this.loadDictionary('en');\n    return this;\n  },\n\n  /**\n   * Clear word list\n   */\n  clearList: function () {\n    words = [];\n    return this;\n  },\n\n  /**\n   * Return word list from dictionary\n   *\n   * @param {string} [name=en] dictionary name\n   * @returns {Array.string}\n   */\n  getDictionary: function (name = 'en') {\n    name = name in wordDictionary ? name : 'en';\n    return wordDictionary[name];\n  },\n\n  /**\n   * Load word list from dictionary to using in the filter\n   *\n   * @param {string} [name=en]\n   */\n  loadDictionary: function (name = 'en') {\n    words = util.clone(this.getDictionary(name));\n  }\n};\nmodule.exports = LeoProfanity;","map":{"version":3,"sources":["C:/Users/andri/Desktop/Github/pianio/frontend/node_modules/leo-profanity/src/index.js"],"names":["util","require","wordDictionary","array","e","flatWords","words","clone","LeoProfanity","removeWord","str","index","indexOf","splice","addWord","push","getReplacementWord","key","n","i","replacementWord","sanitize","toLowerCase","replace","list","check","isFound","strs","match","length","includes","proceed","replaceKey","nbLetters","self","originalString","result","sanitizedStr","sanitizedArr","split","resultArr","badWords","forEach","item","slice","join","clean","badWordsUsed","add","data","constructor","Array","word","remove","reset","loadDictionary","clearList","getDictionary","name","module","exports"],"mappings":"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","sourcesContent":["var util = require('./module/Util')\nvar wordDictionary = [];\nwordDictionary['en'] = require('../dictionary/default.json');\n\n// try to import optional dictionaries\ntry { wordDictionary['fr'] = require('french-badwords-list').array; } catch (e) {}\ntry { wordDictionary['ru'] = require('russian-bad-words').flatWords; } catch (e) {}\n\nvar words = util.clone(wordDictionary['en'])\n\n/**\n * LeoProfanity\n */\nvar LeoProfanity = {\n\n  /**\n   * Remove word from the list\n   * (private)\n   *\n   * @param {string} str\n   */\n  removeWord: function (str) {\n    var index = words.indexOf(str);\n\n    if (index !== -1) {\n      words.splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\n   * Add word into the list\n   * (private)\n   *\n   * @param {string} str\n   */\n  addWord: function (str) {\n    if (words.indexOf(str) === -1) {\n      words.push(str);\n    }\n\n    return this;\n  },\n\n  /**\n   * Return replacement word from key\n   * (private)\n   *\n   * @example\n   * getReplacementWord('*', 3)\n   * return '***'\n   *\n   * @example\n   * getReplacementWord('-', 4)\n   * return '----'\n   *\n   * @param {string} key\n   * @param {number} n\n   * @returns string\n   */\n  getReplacementWord: function (key, n) {\n    var i = 0;\n    var replacementWord = '';\n\n    for (i = 0; i < n; i++) {\n      replacementWord += key;\n    }\n\n    return replacementWord;\n  },\n\n  /**\n   * Sanitize string for this project\n   * 1. Convert to lower case\n   * 2. Replace comma and dot with space\n   * (private)\n   *\n   * @param {string} str\n   * @returns {string}\n   */\n  sanitize: function (str) {\n    str = str.toLowerCase();\n    /* eslint-disable */\n    str = str.replace(/\\.|,/g, ' ');\n\n    return str;\n  },\n\n  /**\n   * Return current profanity words\n   *\n   * @returns {Array.string}\n   */\n  list: function () {\n    return words;\n  },\n\n  /**\n   * Check the string contain profanity words or not\n   * Approach, to make it fast ASAP\n   *\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   * @see http://stackoverflow.com/questions/6116474/how-to-find-if-an-array-contains-a-specific-string-in-javascript-jquery\n   * @see http://stackoverflow.com/questions/9141951/splitting-string-by-whitespace-without-empty-elements\n   *\n   * @param {string} str\n   * @returns {boolean}\n   */\n  check: function (str) {\n    if (!str) return false;\n\n    var i = 0;\n    var isFound = false;\n\n    str = this.sanitize(str);\n    // convert into array and remove white space\n    // add default returned value for some cases (e.g. \".\" will returns null)\n    strs = str.match(/[^ ]+/g) || [];\n    while (!isFound && i <= words.length - 1) {\n      if (strs.includes(words[i])) isFound = true;\n      i++;\n    }\n\n    return isFound;\n  },\n\n  /**\n   * Internal proceeding method\n   *\n   * @todo improve algorithm\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   *\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  proceed: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n\n    var self = this;\n    var originalString = str;\n    var result = str;\n\n    var sanitizedStr = this.sanitize(originalString);\n    // split by whitespace (keep delimiter)\n    // (cause comma and dot already replaced by whitespace)\n    var sanitizedArr = sanitizedStr.split(/(\\s)/);\n    // split by whitespace, comma and dot (keep delimiter)\n    var resultArr = result.split(/(\\s|,|\\.)/);\n\n    // loop through given string\n    var badWords = [];\n    sanitizedArr.forEach(function (item, index) {\n      if (words.includes(item)) {\n        var replacementWord = item.slice(0, nbLetters) + self.getReplacementWord(replaceKey, item.length - nbLetters);\n        badWords.push(resultArr[index]);\n        resultArr[index] = replacementWord;\n      }\n    });\n\n    // combine it\n    result = resultArr.join('');\n\n    return [result, badWords];\n  },\n\n  /**\n   * Replace profanity words\n   *\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  clean: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n    return this.proceed(str, replaceKey, nbLetters)[0];\n  },\n\n  /**\n   * Get list of used bad/profanity words\n   *\n   * @param {string} str\n   * @returns {Array.string}\n   */\n  badWordsUsed: function (str) {\n    if (!str) return '';\n    return this.proceed(str, '*')[1];\n  },\n\n  /**\n   * Add word to the list\n   *\n   * @param {string|Array.string} data\n   */\n  add: function (data) {\n    var self = this;\n\n    if (typeof data === 'string') {\n      self.addWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.addWord(word);\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Remove word from the list\n   *\n   * @param {string|Array.string} data\n   */\n  remove: function (data) {\n    var self = this;\n\n    if (typeof data === 'string') {\n      self.removeWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.removeWord(word);\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Reset word list by using en dictionary\n   * (also remove word that manually add)\n   */\n  reset: function () {\n    this.loadDictionary('en');\n    return this;\n  },\n\n  /**\n   * Clear word list\n   */\n  clearList: function () {\n    words = [];\n\n    return this;\n  },\n\n  /**\n   * Return word list from dictionary\n   *\n   * @param {string} [name=en] dictionary name\n   * @returns {Array.string}\n   */\n  getDictionary: function (name = 'en') {\n    name = (name in wordDictionary) ? name : 'en';\n    return wordDictionary[name]\n  },\n\n  /**\n   * Load word list from dictionary to using in the filter\n   *\n   * @param {string} [name=en]\n   */\n  loadDictionary: function (name = 'en') {\n    words = util.clone(this.getDictionary(name))\n  },\n};\n\nmodule.exports = LeoProfanity;\n"]},"metadata":{},"sourceType":"script"}